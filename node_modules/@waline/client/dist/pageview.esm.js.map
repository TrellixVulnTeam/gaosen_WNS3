{"version":3,"file":"pageview.esm.js","sources":["../src/version.ts","../src/utils/error.ts","../src/utils/fetch.ts","../src/utils/query.ts","../src/pageview.ts"],"sourcesContent":["declare const VERSION: string;\n\nexport const version = VERSION;\n","export const errorHandler = (err: Error): void => {\n  if (err.name !== 'AbortError') console.error(err.message);\n};\n","import type { WalineComment, WalineCommentData } from '../typings';\n\nexport interface FetchErrorData {\n  errno: number;\n  errmsg: string;\n}\n\nconst errorCheck = <T = unknown>(data: T | FetchErrorData, name = ''): T => {\n  if (typeof data === 'object' && (data as FetchErrorData).errno)\n    throw new TypeError(\n      `Fetch ${name} failed with ${(data as FetchErrorData).errno}: ${\n        (data as FetchErrorData).errmsg\n      }`\n    );\n\n  return data as T;\n};\n\nexport interface FetchCountOptions {\n  serverURL: string;\n  paths: string[];\n  signal: AbortSignal;\n  token?: string;\n}\n\nexport const fetchCommentCount = ({\n  serverURL,\n  paths,\n  signal,\n  token,\n}: FetchCountOptions): Promise<number[]> => {\n  const headers: Record<string, string> = {};\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return (\n    fetch(\n      `${serverURL}/comment?type=count&url=${encodeURIComponent(\n        paths.join(',')\n      )}`,\n      { signal, headers }\n    )\n      .then((resp) => resp.json() as Promise<number | number[]>)\n      .then((data) => errorCheck(data, 'comment count'))\n      // TODO: Improve this API\n      .then((counts) => (Array.isArray(counts) ? counts : [counts]))\n  );\n};\nexport interface FetchRecentOptions {\n  serverURL: string;\n  count: number;\n  signal: AbortSignal;\n  token?: string;\n}\n\nexport const fetchRecentComment = ({\n  serverURL,\n  count,\n  signal,\n  token,\n}: FetchRecentOptions): Promise<WalineComment[]> => {\n  const headers: Record<string, string> = {};\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return fetch(`${serverURL}/comment?type=recent&count=${count}`, {\n    signal,\n    headers,\n  })\n    .then((resp) => resp.json() as Promise<WalineComment[]>)\n    .then((data) => errorCheck(data, 'recent comment'));\n};\n\nexport interface FetchListOptions {\n  serverURL: string;\n  path: string;\n  page: number;\n  pageSize: number;\n  signal: AbortSignal;\n  token?: string;\n}\n\nexport interface FetchListResult {\n  count: number;\n  data: WalineComment[];\n  totalPages: number;\n}\n\nexport const fetchCommentList = ({\n  serverURL,\n  path,\n  page,\n  pageSize,\n  signal,\n  token,\n}: FetchListOptions): Promise<FetchListResult> => {\n  const headers: Record<string, string> = {};\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return fetch(\n    `${serverURL}/comment?path=${encodeURIComponent(\n      path\n    )}&pageSize=${pageSize}&page=${page}`,\n    { signal, headers }\n  )\n    .then((resp) => resp.json() as Promise<FetchListResult>)\n    .then((data) => errorCheck(data, 'comment list'));\n};\n\nexport interface PostCommentOptions {\n  serverURL: string;\n  lang: string;\n  token?: string;\n  comment: WalineCommentData;\n}\n\nexport interface PostCommentResponse {\n  data?: WalineComment;\n  errmsg?: string;\n}\n\nexport const postComment = ({\n  serverURL,\n  lang,\n  token,\n  comment,\n}: PostCommentOptions): Promise<PostCommentResponse> => {\n  const headers: Record<string, string> = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'Content-Type': 'application/json',\n  };\n\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return fetch(`${serverURL}/comment?lang=${lang}`, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(comment),\n  }).then((resp) => resp.json() as Promise<PostCommentResponse>);\n};\n\nexport interface FetchPageviewsOptions {\n  serverURL: string;\n  paths: string[];\n  signal: AbortSignal;\n}\n\nexport const fetchPageviews = ({\n  serverURL,\n  paths,\n  signal,\n}: FetchPageviewsOptions): Promise<number[]> =>\n  fetch(`${serverURL}/article?path=${encodeURIComponent(paths.join(','))}`, {\n    signal,\n  })\n    .then((resp) => resp.json() as Promise<number[] | number>)\n    .then((data) => errorCheck(data, 'visit count'))\n    // TODO: Improve this API\n    .then((counts) => (Array.isArray(counts) ? counts : [counts]));\n\nexport interface UpdatePageviewsOptions {\n  serverURL: string;\n  path: string;\n}\n\nexport const updatePageviews = ({\n  serverURL,\n  path,\n}: UpdatePageviewsOptions): Promise<number> =>\n  fetch(`${serverURL}/article`, {\n    method: 'POST',\n    headers: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ path }),\n  })\n    .then((resp) => resp.json() as Promise<number>)\n    .then((data) => errorCheck(data, 'visit count'));\n","export const getQuery = (element: HTMLElement): string | null =>\n  element.dataset.path || element.getAttribute('id');\n","import {\n  errorHandler,\n  fetchPageviews,\n  getQuery,\n  updatePageviews,\n} from './utils';\n\nimport type { WalineAbort } from './typings';\n\nexport interface WalinePageviewCountOptions {\n  /**\n   * Waline 服务端地址\n   *\n   * Waline server url\n   */\n  serverURL: string;\n\n  /**\n   * 浏览量 CSS 选择器\n   *\n   * Pageview CSS selector\n   *\n   * @default '.waline-pageview-count'\n   */\n  selector?: string;\n\n  /**\n   * 需要更新和获取的路径\n   *\n   * Path to be fetched and updated\n   *\n   * @default window.location.pathname\n   */\n  path?: string;\n\n  /**\n   * 是否在查询时更新 path 的浏览量\n   *\n   * Whether update pageviews when fetching path result\n   *\n   * @default true\n   */\n  update?: boolean;\n}\n\nconst renderVisitorCount = (\n  counts: number[],\n  countElements: HTMLElement[]\n): void => {\n  countElements.forEach((element, index) => {\n    element.innerText = counts[index].toString();\n  });\n};\n\nexport const pageviewCount = ({\n  serverURL,\n  path = window.location.pathname,\n  selector = '.waline-pageview-count',\n  update = true,\n}: WalinePageviewCountOptions): WalineAbort => {\n  const controller = new AbortController();\n\n  const elements = Array.from(\n    // visitor selectors\n    document.querySelectorAll<HTMLElement>(selector)\n  );\n\n  const filter = (element: HTMLElement): boolean => {\n    const query = getQuery(element);\n\n    return query !== null && path !== query;\n  };\n\n  const fetch = (elements: HTMLElement[]): Promise<void> =>\n    fetchPageviews({\n      serverURL,\n      paths: elements.map((element) => getQuery(element) || path),\n      signal: controller.signal,\n    })\n      .then((counts) => renderVisitorCount(counts, elements))\n      .catch(errorHandler);\n\n  // we should update pageviews\n  if (update) {\n    const normalElements = elements.filter((element) => !filter(element));\n    const elementsNeedstoBeFetched = elements.filter(filter);\n\n    void updatePageviews({ serverURL, path }).then((count) =>\n      renderVisitorCount(\n        new Array<number>(normalElements.length).fill(count),\n        normalElements\n      )\n    );\n\n    // if we should fetch count of other pages\n    if (elementsNeedstoBeFetched.length) {\n      void fetch(elementsNeedstoBeFetched);\n    }\n  }\n  // we should not update pageviews\n  else {\n    void fetch(elements);\n  }\n\n  return controller.abort.bind(controller);\n};\n"],"names":["version","errorHandler","err","name","console","error","message","errorCheck","data","errno","TypeError","errmsg","fetchPageviews","serverURL","paths","signal","fetch","encodeURIComponent","join","then","resp","json","counts","Array","isArray","updatePageviews","path","method","headers","body","JSON","stringify","getQuery","element","dataset","getAttribute","renderVisitorCount","countElements","forEach","index","innerText","toString","pageviewCount","window","location","pathname","selector","update","controller","AbortController","elements","from","document","querySelectorAll","filter","query","map","catch","normalElements","elementsNeedstoBeFetched","count","length","fill","abort","bind"],"mappings":"AAEO,MAAMA,EAAU,QCFVC,EAAgBC,IACV,eAAbA,EAAIC,MAAuBC,QAAQC,MAAMH,EAAII,UCM7CC,EAAa,CAAcC,EAA0BL,EAAO,MAChE,GAAoB,iBAATK,GAAsBA,EAAwBC,MACvD,MAAM,IAAIC,UACR,SAASP,iBAAqBK,EAAwBC,UACnDD,EAAwBG,UAI/B,OAAOH,GAkIII,EAAiB,EAC5BC,UAAAA,EACAC,MAAAA,EACAC,OAAAA,KAEAC,MAAM,GAAGH,kBAA0BI,mBAAmBH,EAAMI,KAAK,QAAS,CACxEH,OAAAA,IAECI,MAAMC,GAASA,EAAKC,SACpBF,MAAMX,GAASD,EAAWC,EAAM,iBAEhCW,MAAMG,GAAYC,MAAMC,QAAQF,GAAUA,EAAS,CAACA,KAO5CG,EAAkB,EAC7BZ,UAAAA,EACAa,KAAAA,KAEAV,MAAM,GAAGH,YAAqB,CAC5Bc,OAAQ,OACRC,QAAS,CAEP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEL,KAAAA,MAEtBP,MAAMC,GAASA,EAAKC,SACpBF,MAAMX,GAASD,EAAWC,EAAM,iBChLxBwB,EAAYC,GACvBA,EAAQC,QAAQR,MAAQO,EAAQE,aAAa,MC4CzCC,EAAqB,CACzBd,EACAe,KAEAA,EAAcC,SAAQ,CAACL,EAASM,KAC9BN,EAAQO,UAAYlB,EAAOiB,GAAOE,eAIzBC,EAAgB,EAC3B7B,UAAAA,EACAa,KAAAA,EAAOiB,OAAOC,SAASC,SACvBC,SAAAA,EAAW,yBACXC,OAAAA,GAAS,MAET,MAAMC,EAAa,IAAIC,gBAEjBC,EAAW3B,MAAM4B,KAErBC,SAASC,iBAA8BP,IAGnCQ,EAAUrB,IACd,MAAMsB,EAAQvB,EAASC,GAEvB,OAAiB,OAAVsB,GAAkB7B,IAAS6B,GAG9BvC,EAASkC,GACbtC,EAAe,CACbC,UAAAA,EACAC,MAAOoC,EAASM,KAAKvB,GAAYD,EAASC,IAAYP,IACtDX,OAAQiC,EAAWjC,SAElBI,MAAMG,GAAWc,EAAmBd,EAAQ4B,KAC5CO,MAAMxD,GAGX,GAAI8C,EAAQ,CACV,MAAMW,EAAiBR,EAASI,QAAQrB,IAAaqB,EAAOrB,KACtD0B,EAA2BT,EAASI,OAAOA,GAE5C7B,EAAgB,CAAEZ,UAAAA,EAAWa,KAAAA,IAAQP,MAAMyC,GAC9CxB,EACE,IAAIb,MAAcmC,EAAeG,QAAQC,KAAKF,GAC9CF,KAKAC,EAAyBE,QACtB7C,EAAM2C,QAKR3C,EAAMkC,GAGb,OAAOF,EAAWe,MAAMC,KAAKhB"}