{"remainingRequest":"D:\\CodingForFun\\Vue\\somePrograms\\gaosen\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\CodingForFun\\Vue\\somePrograms\\gaosen\\node_modules\\vuepress-plugin-ribbon-animation\\bin\\ribbon.js","dependencies":[{"path":"D:\\CodingForFun\\Vue\\somePrograms\\gaosen\\node_modules\\vuepress-plugin-ribbon-animation\\bin\\ribbon.js","mtime":1648974984065},{"path":"D:\\CodingForFun\\Vue\\somePrograms\\gaosen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648514419946},{"path":"D:\\CodingForFun\\Vue\\somePrograms\\gaosen\\node_modules\\babel-loader\\lib\\index.js","mtime":1648514420186}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiRDovQ29kaW5nRm9yRnVuL1Z1ZS9zb21lUHJvZ3JhbXMvZ2Fvc2VuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5lcnJvci50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudGVzdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbGwuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwoKLyoqDQogKiBSaWJib25zIENsYXNzIEZpbGUuDQogKiBDcmVhdGVzIGxvdy1wb2x5IHJpYmJvbnMgYmFja2dyb3VuZCBlZmZlY3QgaW5zaWRlIGEgdGFyZ2V0IGNvbnRhaW5lci4NCiAqLwooZnVuY3Rpb24gKG5hbWUsIGZhY3RvcnkpIHsKICBpZiAoKHR5cGVvZiB3aW5kb3cgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSAib2JqZWN0IikgewogICAgd2luZG93W25hbWVdID0gZmFjdG9yeSgpOwogIH0KfSkoIlJpYmJvbnMiLCBmdW5jdGlvbiAoKSB7CiAgdmFyIF93ID0gd2luZG93LAogICAgICBfYiA9IGRvY3VtZW50LmJvZHksCiAgICAgIC8v6L+U5ZueaHRtbCBkb23kuK3nmoRib2R56IqC54K5IOWNszxib2R5PgogIF9kID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyAvL+i/lOWbnmh0bWwgZG9t5Lit55qEcm9vdCDoioLngrkg5Y2zPGh0bWw+CiAgLy8gcmFuZG9tIGhlbHBlcgoKICB2YXIgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKCkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIC8vIG9ubHkgMSBhcmd1bWVudAogICAgICB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJndW1lbnRzWzBdKSkgLy8gZXh0cmFjdCBpbmRleCBmcm9tIGFycmF5CiAgICAgICAgICB7CiAgICAgICAgICAgIHZhciBpbmRleCA9IE1hdGgucm91bmQocmFuZG9tKDAsIGFyZ3VtZW50c1swXS5sZW5ndGggLSAxKSk7CiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF1baW5kZXhdOwogICAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmFuZG9tKDAsIGFyZ3VtZW50c1swXSk7IC8vIGFzc3VtZSBudW1lcmljCiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgLy8gdHdvIGFyZ3VtZW50cyByYW5nZQogICAgICB7CiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAoYXJndW1lbnRzWzFdIC0gYXJndW1lbnRzWzBdKSArIGFyZ3VtZW50c1swXTsKICAgICAgfQoKICAgIHJldHVybiAwOyAvLyBkZWZhdWx0CiAgfTsgLy8gc2NyZWVuIGhlbHBlcgoKCiAgdmFyIHNjcmVlbkluZm8gPSBmdW5jdGlvbiBzY3JlZW5JbmZvKGUpIHsKICAgIHZhciB3aWR0aCA9IE1hdGgubWF4KDAsIF93LmlubmVyV2lkdGggfHwgX2QuY2xpZW50V2lkdGggfHwgX2IuY2xpZW50V2lkdGggfHwgMCksCiAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgoMCwgX3cuaW5uZXJIZWlnaHQgfHwgX2QuY2xpZW50SGVpZ2h0IHx8IF9iLmNsaWVudEhlaWdodCB8fCAwKSwKICAgICAgICBzY3JvbGx4ID0gTWF0aC5tYXgoMCwgX3cucGFnZVhPZmZzZXQgfHwgX2Quc2Nyb2xsTGVmdCB8fCBfYi5zY3JvbGxMZWZ0IHx8IDApIC0gKF9kLmNsaWVudExlZnQgfHwgMCksCiAgICAgICAgc2Nyb2xseSA9IE1hdGgubWF4KDAsIF93LnBhZ2VZT2Zmc2V0IHx8IF9kLnNjcm9sbFRvcCB8fCBfYi5zY3JvbGxUb3AgfHwgMCkgLSAoX2QuY2xpZW50VG9wIHx8IDApOwogICAgcmV0dXJuIHsKICAgICAgd2lkdGg6IHdpZHRoLAogICAgICBoZWlnaHQ6IGhlaWdodCwKICAgICAgcmF0aW86IHdpZHRoIC8gaGVpZ2h0LAogICAgICBjZW50ZXJ4OiB3aWR0aCAvIDIsCiAgICAgIGNlbnRlcnk6IGhlaWdodCAvIDIsCiAgICAgIHNjcm9sbHg6IHNjcm9sbHgsCiAgICAgIHNjcm9sbHk6IHNjcm9sbHkKICAgIH07CiAgfTsgLy8gbW91c2UvaW5wdXQgaGVscGVyCgoKICB2YXIgbW91c2VJbmZvID0gZnVuY3Rpb24gbW91c2VJbmZvKGUpIHsKICAgIHZhciBzY3JlZW4gPSBzY3JlZW5JbmZvKGUpLAogICAgICAgIG1vdXNleCA9IGUgPyBNYXRoLm1heCgwLCBlLnBhZ2VYIHx8IGUuY2xpZW50WCB8fCAwKSA6IDAsCiAgICAgICAgbW91c2V5ID0gZSA/IE1hdGgubWF4KDAsIGUucGFnZVkgfHwgZS5jbGllbnRZIHx8IDApIDogMDsKICAgIHJldHVybiB7CiAgICAgIG1vdXNleDogbW91c2V4LAogICAgICBtb3VzZXk6IG1vdXNleSwKICAgICAgY2VudGVyeDogbW91c2V4IC0gc2NyZWVuLndpZHRoIC8gMiwKICAgICAgY2VudGVyeTogbW91c2V5IC0gc2NyZWVuLmhlaWdodCAvIDIKICAgIH07CiAgfTsgLy8gcG9pbnQgb2JqZWN0CgoKICB2YXIgUG9pbnQgPSBmdW5jdGlvbiBQb2ludCh4LCB5KSB7CiAgICB0aGlzLnggPSAwOwogICAgdGhpcy55ID0gMDsKICAgIHRoaXMuc2V0KHgsIHkpOwogIH07CgogIFBvaW50LnByb3RvdHlwZSA9IHsKICAgIGNvbnN0cnVjdG9yOiBQb2ludCwKICAgIHNldDogZnVuY3Rpb24gc2V0KHgsIHkpIHsKICAgICAgdGhpcy54ID0geCB8fCAwOwogICAgICB0aGlzLnkgPSB5IHx8IDA7CiAgICB9LAogICAgY29weTogZnVuY3Rpb24gY29weShwb2ludCkgewogICAgICB0aGlzLnggPSBwb2ludC54IHx8IDA7CiAgICAgIHRoaXMueSA9IHBvaW50LnkgfHwgMDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgbXVsdGlwbHk6IGZ1bmN0aW9uIG11bHRpcGx5KHgsIHkpIHsKICAgICAgdGhpcy54ICo9IHggfHwgMTsKICAgICAgdGhpcy55ICo9IHkgfHwgMTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgZGl2aWRlOiBmdW5jdGlvbiBkaXZpZGUoeCwgeSkgewogICAgICB0aGlzLnggLz0geCB8fCAxOwogICAgICB0aGlzLnkgLz0geSB8fCAxOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCiAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh4LCB5KSB7CiAgICAgIHRoaXMueCArPSB4IHx8IDA7CiAgICAgIHRoaXMueSArPSB5IHx8IDA7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKICAgIHN1YnRyYWN0OiBmdW5jdGlvbiBzdWJ0cmFjdCh4LCB5KSB7CiAgICAgIHRoaXMueCAtPSB4IHx8IDA7CiAgICAgIHRoaXMueSAtPSB5IHx8IDA7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKICAgIGNsYW1wWDogZnVuY3Rpb24gY2xhbXBYKG1pbiwgbWF4KSB7CiAgICAgIHRoaXMueCA9IE1hdGgubWF4KG1pbiwgTWF0aC5taW4odGhpcy54LCBtYXgpKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgY2xhbXBZOiBmdW5jdGlvbiBjbGFtcFkobWluLCBtYXgpIHsKICAgICAgdGhpcy55ID0gTWF0aC5tYXgobWluLCBNYXRoLm1pbih0aGlzLnksIG1heCkpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCiAgICBmbGlwWDogZnVuY3Rpb24gZmxpcFgoKSB7CiAgICAgIHRoaXMueCAqPSAtMTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgZmxpcFk6IGZ1bmN0aW9uIGZsaXBZKCkgewogICAgICB0aGlzLnkgKj0gLTE7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH07IC8vIGNsYXNzIGNvbnN0cnVjdG9yCgogIHZhciBGYWN0b3J5ID0gZnVuY3Rpb24gRmFjdG9yeShvcHRpb25zKSB7CiAgICB0aGlzLl9jYW52YXMgPSBudWxsOwogICAgdGhpcy5fY29udGV4dCA9IG51bGw7CiAgICB0aGlzLl9zdG8gPSBudWxsOwogICAgdGhpcy5fd2lkdGggPSAwOwogICAgdGhpcy5faGVpZ2h0ID0gMDsKICAgIHRoaXMuX3Njcm9sbCA9IDA7CiAgICB0aGlzLl9yaWJib25zID0gW107CiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uczsKICAgIHRoaXMuX29uRHJhdyA9IHRoaXMuX29uRHJhdy5iaW5kKHRoaXMpOwogICAgdGhpcy5fb25SZXNpemUgPSB0aGlzLl9vblJlc2l6ZS5iaW5kKHRoaXMpOwogICAgdGhpcy5fb25TY3JvbGwgPSB0aGlzLl9vblNjcm9sbC5iaW5kKHRoaXMpOwogICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgdGhpcy5pbml0KCk7CiAgfTsgLy8gY2xhc3MgcHJvdG90eXBlCgoKICBGYWN0b3J5LnByb3RvdHlwZSA9IHsKICAgIGNvbnN0cnVjdG9yOiBGYWN0b3J5LAogICAgLy8gU2V0IGFuZCBtZXJnZSBsb2NhbCBvcHRpb25zCiAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHsKICAgICAgaWYgKF90eXBlb2Yob3B0aW9ucykgPT09ICJvYmplY3QiKSB7CiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHsKICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgdGhpcy5fb3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIC8vIEluaXRpYWxpemUgdGhlIHJpYmJvbnMgZWZmZWN0CiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkgewogICAgICB0cnkgewogICAgICAgIHRoaXMuX2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZVsiZGlzcGxheSJdID0gImJsb2NrIjsKICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGVbInBvc2l0aW9uIl0gPSAiZml4ZWQiOwogICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZVsibWFyZ2luIl0gPSAiMCI7CiAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlWyJwYWRkaW5nIl0gPSAiMCI7CiAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlWyJib3JkZXIiXSA9ICIwIjsKICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGVbIm91dGxpbmUiXSA9ICIwIjsKICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGVbImxlZnQiXSA9ICIwIjsKICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGVbInRvcCJdID0gIjAiOwogICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZVsid2lkdGgiXSA9ICIxMDAlIjsKICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGVbImhlaWdodCJdID0gIjEwMCUiOwogICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZVsiei1pbmRleCJdID0gIi0xIjsgLy8gdGhpcy5fY2FudmFzLnN0eWxlWyJiYWNrZ3JvdW5kLWNvbG9yIl09IiMxZjFmMWYiOwoKICAgICAgICB0aGlzLl9jYW52YXMuaWQgPSAiYmdDYW52YXMiOwoKICAgICAgICB0aGlzLl9vblJlc2l6ZSgpOwoKICAgICAgICB0aGlzLl9jb250ZXh0ID0gdGhpcy5fY2FudmFzLmdldENvbnRleHQoIjJkIik7CgogICAgICAgIHRoaXMuX2NvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpOwoKICAgICAgICB0aGlzLl9jb250ZXh0Lmdsb2JhbEFscGhhID0gdGhpcy5fb3B0aW9ucy5jb2xvckFscGhhOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJyZXNpemUiLCB0aGlzLl9vblJlc2l6ZSk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInNjcm9sbCIsIHRoaXMuX29uU2Nyb2xsKTsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2NhbnZhcyk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLndhcm4oIkNhbnZhcyBDb250ZXh0IEVycm9yOiAiICsgZS50b1N0cmluZygpKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuX29uRHJhdygpOwogICAgfSwKICAgIC8vIENyZWF0ZSBhIG5ldyByYW5kb20gcmliYm9uIGFuZCB0byB0aGUgbGlzdAogICAgYWRkUmliYm9uOiBmdW5jdGlvbiBhZGRSaWJib24oKSB7CiAgICAgIC8vIG1vdmVtZW50IGRhdGEKICAgICAgdmFyIGRpciA9IE1hdGgucm91bmQocmFuZG9tKDEsIDkpKSA+IDUgPyAicmlnaHQiIDogImxlZnQiLAogICAgICAgICAgc3RvcCA9IDEwMDAsCiAgICAgICAgICBoaWRlID0gMjAwLAogICAgICAgICAgbWluID0gMCAtIGhpZGUsCiAgICAgICAgICBtYXggPSB0aGlzLl93aWR0aCArIGhpZGUsCiAgICAgICAgICBtb3ZleCA9IDAsCiAgICAgICAgICBtb3ZleSA9IDAsCiAgICAgICAgICBzdGFydHggPSBkaXIgPT09ICJyaWdodCIgPyBtaW4gOiBtYXgsCiAgICAgICAgICBzdGFydHkgPSBNYXRoLnJvdW5kKHJhbmRvbSgwLCB0aGlzLl9oZWlnaHQpKTsgLy8gYXNqdXN0IHN0YXJ0eSBiYXNlZCBvbiBvcHRpb25zCgogICAgICBpZiAoL14odG9wfG1pbikkL2kudGVzdCh0aGlzLl9vcHRpb25zLnZlcnRpY2FsUG9zaXRpb24pKSB7CiAgICAgICAgc3RhcnR5ID0gMCArIGhpZGU7CiAgICAgIH0gZWxzZSBpZiAoL14obWlkZGxlfGNlbnRlcikkL2kudGVzdCh0aGlzLl9vcHRpb25zLnZlcnRpY2FsUG9zaXRpb24pKSB7CiAgICAgICAgc3RhcnR5ID0gdGhpcy5faGVpZ2h0IC8gMjsKICAgICAgfSBlbHNlIGlmICgvXihib3R0b218bWF4KSQvaS50ZXN0KHRoaXMuX29wdGlvbnMudmVydGljYWxQb3NpdGlvbikpIHsKICAgICAgICBzdGFydHkgPSB0aGlzLl9oZWlnaHQgLSBoaWRlOwogICAgICB9IC8vIHJpYmJvbiBzZWN0aW9ucyBkYXRhCgoKICAgICAgdmFyIHJpYmJvbiA9IFtdLAogICAgICAgICAgcG9pbnQxID0gbmV3IFBvaW50KHN0YXJ0eCwgc3RhcnR5KSwKICAgICAgICAgIHBvaW50MiA9IG5ldyBQb2ludChzdGFydHgsIHN0YXJ0eSksCiAgICAgICAgICBwb2ludDMgPSBudWxsLAogICAgICAgICAgY29sb3IgPSBNYXRoLnJvdW5kKHJhbmRvbSgwLCAzNjApKSwKICAgICAgICAgIGRlbGF5ID0gMDsgLy8gYnVpbHMgcmliYm9uIHNlY3Rpb25zCgogICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgIGlmIChzdG9wIDw9IDApIGJyZWFrOwogICAgICAgIHN0b3AtLTsKICAgICAgICBtb3ZleCA9IE1hdGgucm91bmQoKE1hdGgucmFuZG9tKCkgKiAxIC0gMC4yKSAqIHRoaXMuX29wdGlvbnMuaG9yaXpvbnRhbFNwZWVkKTsKICAgICAgICBtb3ZleSA9IE1hdGgucm91bmQoKE1hdGgucmFuZG9tKCkgKiAxIC0gMC41KSAqICh0aGlzLl9oZWlnaHQgKiAwLjI1KSk7CiAgICAgICAgcG9pbnQzID0gbmV3IFBvaW50KCk7CiAgICAgICAgcG9pbnQzLmNvcHkocG9pbnQyKTsKCiAgICAgICAgaWYgKGRpciA9PT0gInJpZ2h0IikgewogICAgICAgICAgcG9pbnQzLmFkZChtb3ZleCwgbW92ZXkpOwogICAgICAgICAgaWYgKHBvaW50Mi54ID49IG1heCkgYnJlYWs7CiAgICAgICAgfSBlbHNlIGlmIChkaXIgPT09ICJsZWZ0IikgewogICAgICAgICAgcG9pbnQzLnN1YnRyYWN0KG1vdmV4LCBtb3ZleSk7CiAgICAgICAgICBpZiAocG9pbnQyLnggPD0gbWluKSBicmVhazsKICAgICAgICB9IC8vIHBvaW50My5jbGFtcFkoIDAsIHRoaXMuX2hlaWdodCApOwoKCiAgICAgICAgcmliYm9uLnB1c2goewogICAgICAgICAgLy8gc2luZ2xlIHJpYmJvbiBzZWN0aW9uCiAgICAgICAgICBwb2ludDE6IG5ldyBQb2ludChwb2ludDEueCwgcG9pbnQxLnkpLAogICAgICAgICAgcG9pbnQyOiBuZXcgUG9pbnQocG9pbnQyLngsIHBvaW50Mi55KSwKICAgICAgICAgIHBvaW50MzogcG9pbnQzLAogICAgICAgICAgY29sb3I6IGNvbG9yLAogICAgICAgICAgZGVsYXk6IGRlbGF5LAogICAgICAgICAgZGlyOiBkaXIsCiAgICAgICAgICBhbHBoYTogMCwKICAgICAgICAgIHBoYXNlOiAwCiAgICAgICAgfSk7CiAgICAgICAgcG9pbnQxLmNvcHkocG9pbnQyKTsKICAgICAgICBwb2ludDIuY29weShwb2ludDMpOwogICAgICAgIGRlbGF5ICs9IDQ7CiAgICAgICAgY29sb3IgKz0gdGhpcy5fb3B0aW9ucy5jb2xvckN5Y2xlU3BlZWQ7CiAgICAgIH0KCiAgICAgIHRoaXMuX3JpYmJvbnMucHVzaChyaWJib24pOwogICAgfSwKICAgIC8vIERyYXcgc2luZ2xlIHNlY3Rpb24KICAgIF9kcmF3UmliYm9uU2VjdGlvbjogZnVuY3Rpb24gX2RyYXdSaWJib25TZWN0aW9uKHNlY3Rpb24pIHsKICAgICAgaWYgKHNlY3Rpb24pIHsKICAgICAgICBpZiAoc2VjdGlvbi5waGFzZSA+PSAxICYmIHNlY3Rpb24uYWxwaGEgPD0gMCkgewogICAgICAgICAgcmV0dXJuIHRydWU7IC8vIGRvbmUKICAgICAgICB9CgogICAgICAgIGlmIChzZWN0aW9uLmRlbGF5IDw9IDApIHsKICAgICAgICAgIHNlY3Rpb24ucGhhc2UgKz0gMC4wMjsKICAgICAgICAgIHNlY3Rpb24uYWxwaGEgPSBNYXRoLnNpbihzZWN0aW9uLnBoYXNlKSAqIDE7CiAgICAgICAgICBzZWN0aW9uLmFscGhhID0gc2VjdGlvbi5hbHBoYSA8PSAwID8gMCA6IHNlY3Rpb24uYWxwaGE7CiAgICAgICAgICBzZWN0aW9uLmFscGhhID0gc2VjdGlvbi5hbHBoYSA+PSAxID8gMSA6IHNlY3Rpb24uYWxwaGE7CgogICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYW5pbWF0ZVNlY3Rpb25zKSB7CiAgICAgICAgICAgIHZhciBtb2QgPSBNYXRoLnNpbigxICsgc2VjdGlvbi5waGFzZSAqIE1hdGguUEkgLyAyKSAqIDAuMTsKCiAgICAgICAgICAgIGlmIChzZWN0aW9uLmRpciA9PT0gInJpZ2h0IikgewogICAgICAgICAgICAgIHNlY3Rpb24ucG9pbnQxLmFkZChtb2QsIDApOwogICAgICAgICAgICAgIHNlY3Rpb24ucG9pbnQyLmFkZChtb2QsIDApOwogICAgICAgICAgICAgIHNlY3Rpb24ucG9pbnQzLmFkZChtb2QsIDApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNlY3Rpb24ucG9pbnQxLnN1YnRyYWN0KG1vZCwgMCk7CiAgICAgICAgICAgICAgc2VjdGlvbi5wb2ludDIuc3VidHJhY3QobW9kLCAwKTsKICAgICAgICAgICAgICBzZWN0aW9uLnBvaW50My5zdWJ0cmFjdChtb2QsIDApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzZWN0aW9uLnBvaW50MS5hZGQoMCwgbW9kKTsKICAgICAgICAgICAgc2VjdGlvbi5wb2ludDIuYWRkKDAsIG1vZCk7CiAgICAgICAgICAgIHNlY3Rpb24ucG9pbnQzLmFkZCgwLCBtb2QpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWN0aW9uLmRlbGF5IC09IDAuNTsKICAgICAgICB9CgogICAgICAgIHZhciBzID0gdGhpcy5fb3B0aW9ucy5jb2xvclNhdHVyYXRpb24sCiAgICAgICAgICAgIGwgPSB0aGlzLl9vcHRpb25zLmNvbG9yQnJpZ2h0bmVzcywKICAgICAgICAgICAgYyA9ICJoc2xhKCIgKyBzZWN0aW9uLmNvbG9yICsgIiwgIiArIHMgKyAiLCAiICsgbCArICIsICIgKyBzZWN0aW9uLmFscGhhICsgIiApIjsKCiAgICAgICAgdGhpcy5fY29udGV4dC5zYXZlKCk7CgogICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnBhcmFsbGF4QW1vdW50ICE9PSAwKSB7CiAgICAgICAgICB0aGlzLl9jb250ZXh0LnRyYW5zbGF0ZSgwLCB0aGlzLl9zY3JvbGwgKiB0aGlzLl9vcHRpb25zLnBhcmFsbGF4QW1vdW50KTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7CgogICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHNlY3Rpb24ucG9pbnQxLngsIHNlY3Rpb24ucG9pbnQxLnkpOwoKICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyhzZWN0aW9uLnBvaW50Mi54LCBzZWN0aW9uLnBvaW50Mi55KTsKCiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oc2VjdGlvbi5wb2ludDMueCwgc2VjdGlvbi5wb2ludDMueSk7CgogICAgICAgIHRoaXMuX2NvbnRleHQuZmlsbFN0eWxlID0gYzsKCiAgICAgICAgdGhpcy5fY29udGV4dC5maWxsKCk7CgogICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnN0cm9rZVNpemUgPiAwKSB7CiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVXaWR0aCA9IHRoaXMuX29wdGlvbnMuc3Ryb2tlU2l6ZTsKICAgICAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlU3R5bGUgPSBjOwogICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lQ2FwID0gInJvdW5kIjsKCiAgICAgICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZSgpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fY29udGV4dC5yZXN0b3JlKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsgLy8gbm90IGRvbmUgeWV0CiAgICB9LAogICAgLy8gRHJhdyByaWJib25zCiAgICBfb25EcmF3OiBmdW5jdGlvbiBfb25EcmF3KCkgewogICAgICAvLyBjbGVhbnVwIG9uIHJpYmJvbnMgbGlzdCB0byBydGVtb3ZlZCBmaW5pc2hlZCByaWJib25zCiAgICAgIGZvciAodmFyIGkgPSAwLCB0ID0gdGhpcy5fcmliYm9ucy5sZW5ndGg7IGkgPCB0OyArK2kpIHsKICAgICAgICBpZiAoIXRoaXMuX3JpYmJvbnNbaV0pIHsKICAgICAgICAgIHRoaXMuX3JpYmJvbnMuc3BsaWNlKGksIDEpOwogICAgICAgIH0KICAgICAgfSAvLyBkcmF3IG5ldyByaWJib25zCgoKICAgICAgdGhpcy5fY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7CgogICAgICBmb3IgKHZhciBhID0gMDsgYSA8IHRoaXMuX3JpYmJvbnMubGVuZ3RoOyArK2EpIC8vIHNpbmdsZSByaWJib24KICAgICAgewogICAgICAgIHZhciByaWJib24gPSB0aGlzLl9yaWJib25zW2FdLAogICAgICAgICAgICBudW1TZWN0aW9ucyA9IHJpYmJvbi5sZW5ndGgsCiAgICAgICAgICAgIG51bURvbmUgPSAwOwoKICAgICAgICBmb3IgKHZhciBiID0gMDsgYiA8IG51bVNlY3Rpb25zOyArK2IpIC8vIHJpYmJvbiBzZWN0aW9uCiAgICAgICAgewogICAgICAgICAgaWYgKHRoaXMuX2RyYXdSaWJib25TZWN0aW9uKHJpYmJvbltiXSkpIHsKICAgICAgICAgICAgbnVtRG9uZSsrOyAvLyBzZWN0aW9uIGRvbmUKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChudW1Eb25lID49IG51bVNlY3Rpb25zKSAvLyByaWJib24gZG9uZQogICAgICAgICAgewogICAgICAgICAgICB0aGlzLl9yaWJib25zW2FdID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgfSAvLyBtYWludGFpbiBvcHRpb25hbCBudW1iZXIgb2YgcmliYm9ucyBvbiBjYW52YXMKCgogICAgICBpZiAodGhpcy5fcmliYm9ucy5sZW5ndGggPCB0aGlzLl9vcHRpb25zLnJpYmJvbkNvdW50KSB7CiAgICAgICAgdGhpcy5hZGRSaWJib24oKTsKICAgICAgfQoKICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX29uRHJhdyk7CiAgICB9LAogICAgLy8gVXBkYXRlIGNvbnRhaW5lciBzaXplIGluZm8KICAgIF9vblJlc2l6ZTogZnVuY3Rpb24gX29uUmVzaXplKGUpIHsKICAgICAgdmFyIHNjcmVlbiA9IHNjcmVlbkluZm8oZSk7CiAgICAgIHRoaXMuX3dpZHRoID0gc2NyZWVuLndpZHRoOwogICAgICB0aGlzLl9oZWlnaHQgPSBzY3JlZW4uaGVpZ2h0OwoKICAgICAgaWYgKHRoaXMuX2NhbnZhcykgewogICAgICAgIHRoaXMuX2NhbnZhcy53aWR0aCA9IHRoaXMuX3dpZHRoOwogICAgICAgIHRoaXMuX2NhbnZhcy5oZWlnaHQgPSB0aGlzLl9oZWlnaHQ7CgogICAgICAgIGlmICh0aGlzLl9jb250ZXh0KSB7CiAgICAgICAgICB0aGlzLl9jb250ZXh0Lmdsb2JhbEFscGhhID0gdGhpcy5fb3B0aW9ucy5jb2xvckFscGhhOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIC8vIFVwZGF0ZSBjb250YWluZXIgc2l6ZSBpbmZvCiAgICBfb25TY3JvbGw6IGZ1bmN0aW9uIF9vblNjcm9sbChlKSB7CiAgICAgIHZhciBzY3JlZW4gPSBzY3JlZW5JbmZvKGUpOwogICAgICB0aGlzLl9zY3JvbGwgPSBzY3JlZW4uc2Nyb2xseTsKICAgIH0KICB9OyAvLyBleHBvcnQKCiAgcmV0dXJuIEZhY3Rvcnk7Cn0pOwoKZXhwb3J0IGRlZmF1bHQgUmliYm9uczs="},null]}